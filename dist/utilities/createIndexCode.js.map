{"version":3,"sources":["../../src/utilities/createIndexCode.js"],"names":["safeVariableName","fileName","indexOfDot","indexOf","safeFileName","slice","_","upperFirst","camelCase","buildExportBlock","files","importBlock","map","nameWithoutExtension","replace","join","filePaths","options","code","configCode","banner","banners","isArray","forEach","config","size","JSON","stringify","length","sortedFilePaths","sort"],"mappings":";;;;;;;AAAA;;;;AAEA,MAAMA,gBAAgB,GAAIC,QAAD,IAAc;AACrC,QAAMC,UAAU,GAAGD,QAAQ,CAACE,OAAT,CAAiB,GAAjB,CAAnB;AACA,MAAIC,YAAY,GAAGH,QAAnB;;AAEA,MAAIC,UAAU,KAAK,CAAC,CAApB,EAAuB;AACrBE,IAAAA,YAAY,GAAGH,QAAQ,CAACI,KAAT,CAAe,CAAf,EAAkBH,UAAlB,CAAf;AACD;;AAED,SAAOI,gBAAEC,UAAF,CAAaD,gBAAEE,SAAF,CAAYJ,YAAZ,CAAb,CAAP;AACD,CATD;;AAWA,MAAMK,gBAAgB,GAAIC,KAAD,IAAW;AAClC,MAAIC,WAAJ;AAEAA,EAAAA,WAAW,GAAGL,gBAAEM,GAAF,CAAMF,KAAN,EAAcT,QAAD,IAAc;AACvC;AACA,UAAMY,oBAAoB,GAAGZ,QAAQ,CAACa,OAAT,CAAiB,UAAjB,EAA6B,EAA7B,CAA7B;AACA,WACE,yBACAd,gBAAgB,CAACC,QAAD,CADhB,GAEA,aAFA,GAGAY,oBAHA,GAIA,IALF;AAOD,GAVa,CAAd;AAYAF,EAAAA,WAAW,GAAGA,WAAW,CAACI,IAAZ,CAAiB,IAAjB,CAAd;AAEA,SAAOJ,WAAP;AACD,CAlBD;;eAoBe,kBAACK,SAAD,EAA6B;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;AAC1C,MAAIC,IAAJ;AACA,MAAIC,UAAJ;AAEAD,EAAAA,IAAI,GAAG,EAAP;AACAC,EAAAA,UAAU,GAAG,EAAb;;AAEA,MAAIF,OAAO,CAACG,MAAZ,EAAoB;AAClB,UAAMC,OAAO,GAAGf,gBAAEgB,OAAF,CAAUL,OAAO,CAACG,MAAlB,IACZH,OAAO,CAACG,MADI,GAEZ,CAACH,OAAO,CAACG,MAAT,CAFJ;AAIAC,IAAAA,OAAO,CAACE,OAAR,CAAiBH,MAAD,IAAY;AAC1BF,MAAAA,IAAI,IAAIE,MAAM,GAAG,IAAjB;AACD,KAFD;AAIAF,IAAAA,IAAI,IAAI,IAAR;AACD;;AAED,MAAID,OAAO,CAACO,MAAR,IAAkBlB,gBAAEmB,IAAF,CAAOR,OAAO,CAACO,MAAf,IAAyB,CAA/C,EAAkD;AAChDL,IAAAA,UAAU,IAAI,MAAMO,IAAI,CAACC,SAAL,CAAeV,OAAO,CAACO,MAAvB,CAApB;AACD;;AAEDN,EAAAA,IAAI,IAAI,qBAAqBC,UAArB,GAAkC,MAA1C;;AAEA,MAAIH,SAAS,CAACY,MAAd,EAAsB;AACpB,UAAMC,eAAe,GAAGb,SAAS,CAACc,IAAV,EAAxB;AAEAZ,IAAAA,IAAI,IAAIT,gBAAgB,CAACoB,eAAD,CAAhB,GAAoC,MAA5C;AACD;;AAED,SAAOX,IAAP;AACD,C","sourcesContent":["import _ from \"lodash\";\n\nconst safeVariableName = (fileName) => {\n  const indexOfDot = fileName.indexOf(\".\");\n  let safeFileName = fileName;\n\n  if (indexOfDot !== -1) {\n    safeFileName = fileName.slice(0, indexOfDot);\n  }\n\n  return _.upperFirst(_.camelCase(safeFileName));\n};\n\nconst buildExportBlock = (files) => {\n  let importBlock;\n\n  importBlock = _.map(files, (fileName) => {\n    // Removes .ts for TypeScript compatibility\n    const nameWithoutExtension = fileName.replace(/\\.[^.]*$/, \"\");\n    return (\n      \"export { default as \" +\n      safeVariableName(fileName) +\n      \" } from './\" +\n      nameWithoutExtension +\n      \"';\"\n    );\n  });\n\n  importBlock = importBlock.join(\"\\n\");\n\n  return importBlock;\n};\n\nexport default (filePaths, options = {}) => {\n  let code;\n  let configCode;\n\n  code = \"\";\n  configCode = \"\";\n\n  if (options.banner) {\n    const banners = _.isArray(options.banner)\n      ? options.banner\n      : [options.banner];\n\n    banners.forEach((banner) => {\n      code += banner + \"\\n\";\n    });\n\n    code += \"\\n\";\n  }\n\n  if (options.config && _.size(options.config) > 0) {\n    configCode += \" \" + JSON.stringify(options.config);\n  }\n\n  code += \"// @create-index\" + configCode + \"\\n\\n\";\n\n  if (filePaths.length) {\n    const sortedFilePaths = filePaths.sort();\n\n    code += buildExportBlock(sortedFilePaths) + \"\\n\\n\";\n  }\n\n  return code;\n};\n"],"file":"createIndexCode.js"}